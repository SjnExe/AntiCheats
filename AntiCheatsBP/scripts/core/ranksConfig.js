// AntiCheatsBP/scripts/core/ranksConfig.js

/**
 * Configuration for all server ranks, their properties, and conditions.
 */

// Default formatting for players who don't match any specific rank
// or for ranks that don't override all formatting options.
export const defaultChatFormatting = {
    prefixText: "§7[Member] ", // Default prefix if a rank has no specific one
    prefixColor: "§7",       // Default color for the prefix text
    nameColor: "§7",         // Default color for the player's name
    messageColor: "§f"       // Default color for the player's message
};

export const defaultNametagPrefix = "§7Member§f\n"; // Default nametag prefix

// Default permission level for players not matching any rank with specific conditions.
// This numeric value should correspond to a "default" or "member" rank defined below.
export const defaultPermissionLevel = 1024;

export const rankDefinitions = [
    {
        id: "owner",
        name: "Owner",
        permissionLevel: 0,
        chatFormatting: {
            prefixText: "§c[Owner] ", // Full prefix text including its own color
            prefixColor: "§c",        // Specific color for the prefix component
            nameColor: "§c",          // Color for the owner's name
            messageColor: "§f"        // Color for the owner's messages
        },
        nametagPrefix: "§cOwner§f\n", // Nametag shown above the player
        conditions: [
            // Condition evaluated by rankManager using config.ownerPlayerName
            { type: "owner_name" }
        ],
        priority: 0, // Highest priority
        // assignableBy: 0 // Owner rank is typically not assignable by commands
    },
    {
        id: "admin",
        name: "Admin",
        permissionLevel: 1,
        chatFormatting: {
            prefixText: "§b[Admin] ",
            prefixColor: "§b",
            nameColor: "§b",
            messageColor: "§f"
        },
        nametagPrefix: "§bAdmin§f\n",
        conditions: [
            // Condition evaluated by rankManager using config.adminTag
            { type: "admin_tag" }
        ],
        priority: 10,
        assignableBy: 0 // Only owner can make someone an admin via commands
    },
    {
        id: "member", // Default/Fallback rank
        name: "Member",
        permissionLevel: 1024, // Matches defaultPermissionLevel
        chatFormatting: { // Uses the defaultChatFormatting effectively
            prefixText: "§7[Member] ",
            prefixColor: "§7",
            nameColor: "§7",
            messageColor: "§f"
        },
        nametagPrefix: "§7Member§f\n",
        conditions: [
            // This rank is applied if no higher priority rank conditions are met.
            // It acts as the default.
            { type: "default" }
        ],
        priority: 1000, // Lowest priority (higher number)
        // assignableBy: 1 // Example: Admins could assign member rank, though it's usually default
    }
    // Example for a new, assignable rank (to be added/managed by server owner):
    // {
    //     id: "vip",
    //     name: "VIP",
    //     permissionLevel: 500, // Example: Less perms than admin, more than member
    //     chatFormatting: {
    //         prefixText: "§e[VIP] ",
    //         prefixColor: "§e",
    //         nameColor: "§e",
    //         messageColor: "§6"
    //     },
    //     nametagPrefix: "§e[VIP]§f\n",
    //     conditions: [
    //         // rankManager will look for a tag like "rank_vip" if this condition is used
    //         { type: "manual_tag_prefix", prefix: "rank_" }
    //     ],
    //     priority: 100,
    //     assignableBy: 1 // Example: Admins can assign/remove VIP
    // }
];

// Note: The actual `permissionLevels` object (e.g., { owner: 0, admin: 1, member: 1024 })
// will be dynamically generated by rankManager.js at startup by reading these definitions.
// This ensures it's always in sync with the configured ranks and their numeric levels.

// The `config.js` will still hold `ownerPlayerName` and `adminTag`.
// `rankManager.js` will use those config values when evaluating "owner_name" and "admin_tag" conditions.
// For "manual_tag_prefix", `rankManager.js` will construct the expected tag like `prefix + rankId` (e.g., "rank_vip").
// The `assignableBy` field will be used by the new rank management commands.
// `defaultPermissionLevel` is for players who don't match any conditions.
// `defaultChatFormatting` and `defaultNametagPrefix` apply if a rank doesn't specify them or for default players.
// The 'member' rank here with `type: "default"` condition and lowest priority ensures everyone gets at least these base settings.
// If a player has a "rank_vip" tag, they would get the VIP rank if its priority is higher than member's.
// If an admin also has a "rank_vip" tag, they'd still be admin due to priority (admin priority 10 vs VIP 100).
// If ownerPlayerName is set, that player is owner (priority 0).
// If a player has adminTag, they are admin (priority 10), unless they are also owner.
// The system will pick the highest priority rank for which a player meets any condition.
